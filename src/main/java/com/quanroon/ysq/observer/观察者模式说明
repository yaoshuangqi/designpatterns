
     定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并被自动更新

结合实际分析:
    根据定义很容易得出实际业务场景，比如，当我们某一个业务状态改变时，需要通知下游业务进行自动更新，而不是使用什么定时器，调度任务这种重量级的方式处理
    因为本身业务场景就是在一起的，并且根据业务发展，可能还需要有更多的下游业务扩展。

    这个时候，观察者模式就可以完美派上用场

实际操作：
    1.根据面向接口编程思想，先定义一个subject接口，作为广播者的超类

    2.在定义个Observer类，作为观察者的超类（声明通知者通用的接口）

    3.申明一个天气广播者的类，**WeatherData，实现其观察者的超类，并持有广播者的引用

    4.每但天气发生变化时，即可启动广播站，并调用通知方法，（从整体上看，这是这种”推送push“关系，还有一种”拉取pull“的关系）

    5.实际上，java API中内置了观察者模式的支持。（这种情况，可以使用java.util.Observable类,Observer接口）


注意点：
    优点：
        1.因为广播者和观察者代码之间是低耦合的，比较灵活，弹性可扩展性比较高(后续 可以动态的添加新的观察者，而广播者几乎不受影响)
        2.可以建立一套触发机制
    缺点：
        1.比如需要通知的观察者太多，完整的一个流程下来就可能效率比较低，比较浪费时间
        2.观察者和广播者一定不能有循环依赖关系，否则程序会进入崩溃
