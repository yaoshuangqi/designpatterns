
    定义了算法族，分别封装起来，让它们之间可以互相替换，此模式的变化独立于算法的使用者

结合实际分析:
    比如我们有这样一个需求，
        我们SAAS系统中有一个住建局城市上报功能，目前上报城市定为【深圳，上海，北京】，上报的内容有【参加单位，班组，劳工，
    考勤】,不排除后面需求扩展（增加上报城市，上报内容）。

    业务的发展，初步知道，有一些稳定的部分，有一些变动的部分。比如上报城市的内有都用劳工上报，考勤上报。

    这时候，可以把住建局上报看成一个模板，采用策略模式

实际操作：
    1.抽象策略接口
    2.实现策略接口，为具体模板类（具体模板类有多个）
    3.创建环境类，并注入具体类，封装策略方法，供外部调用环境类实例，从而调用对应策略
